/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.4
</auto-generated>
------------------------------------------------------------------------------ */
using System.Collections.Generic;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using SitefinityWebApp.Common;
using System.Data;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Model;
using System.Linq;
using System;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.GenericContent.Model;

namespace SitefinityWebApp.Mvc.Models
{
	public class FullwidthFiftyFiftyCarouselModel
	{
		public string Title { get; set; } = "Title Not available";
		public string Description { get; set; } = "Description Not available";

		public List<TestimonialCarouselModel> GetList()
		{

			//int id;
			DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager();
			//Type carouselType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.Carousels.Carousel");
			Type ctEmployeeType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.MDL_BT.Full_width_50_Carousel");

			//  This is how we get the collection of Carousel items
			//  var myFilteredCollection = dynamicModuleManager.GetDataItems(carouselType).Where(i => i.Status == ContentLifecycleStatus.Live).Where("CarouselId == " + id).AsEnumerable();
			//  var myFilteredCollection = dynamicModuleManager.GetDataItems(carouselType).Where(i => i.Status == ContentLifecycleStatus.Live).AsEnumerable();

			var myFilteredCollection = dynamicModuleManager.GetDataItems(ctEmployeeType).Where(i => i.Status == ContentLifecycleStatus.Live);//.Where("Title = \"Some Title\"")

			IList<TestimonialCarouselModel> myCarousel = new List<TestimonialCarouselModel>();

			foreach (var row in myFilteredCollection)
			{
				TestimonialCarouselModel item = new TestimonialCarouselModel();
				//item.Title = row.GetValue("Title").ToString();
				item.Description = row.GetValue("Description").ToString();

				List<Telerik.Sitefinity.Model.IDataItem> imageList = new List<Telerik.Sitefinity.Model.IDataItem>();
				imageList = (List<Telerik.Sitefinity.Model.IDataItem>)row.GetValue("FW50_Image");

				//foreach (var imgdd in imageList)
				//{
				//	int n = 1;
				//}
				if (imageList != null && imageList.Count > 0)
				{
					var imageId = imageList.FirstOrDefault().Id;
					//List<Telerik.Sitefinity.Model.IDataItem> imgObj = row.GetValue("ImgName") ;
					//var imageId = ((Telerik.Sitefinity.Model.IDataItem)row.GetValue("ImgName"));
					//var str= ((Telerik.Sitefinity.Libraries.Model.MediaContent)
					//(new System.Collections.Generic.List<Telerik.Sitefinity.Model.IDataItem>row.GetValue("ImgName")));
					LibrariesManager libManager = LibrariesManager.GetManager();
					var image = libManager.GetImages().Where(d => d.Id == imageId).First();
					// Create a new List collection, extract our details and put them in there
					item.SelectedImageSrc = image.Url;
				}
				//item.SelectedPageLink = row.GetValue("CarouselLink").ToString();
				//item.SelectedVideoSrc = row.GetValue("CarouselVideo").ToString();
				//item.LinkText = row.GetValue("CarouselText").ToString();
				myCarousel.Add(item);
			}

			return myCarousel.ToList();
		}

		public List<FullwidthFiftyFiftyCarouselModel> GetList_Query()
		{
			List<FullwidthFiftyFiftyCarouselModel> m_List = new List<FullwidthFiftyFiftyCarouselModel>();
			string sqlQuery = @"select top 5 A.*, b.status, b.approval_workflow_state_
					 from mdl_bt_full_width_50_carousel A, sf_dynamic_content B where A.base_id=B.base_id and status=2
					 Order by b.publication_date desc ";
			DataTable dt = GeneralFun.GetData(sqlQuery);

			foreach (DataRow dr in dt.Rows)
			{
				FullwidthFiftyFiftyCarouselModel m_item = new FullwidthFiftyFiftyCarouselModel();
				//if (dr["Title"] != null)
				//{
				//	m_item.Title = dr["Title"].ToString();
				//}
				if (dr["Description"] != null)
				{
					m_item.Description = dr["Description"].ToString();
				}
				m_List.Add(m_item);
			}
			return m_List;
		}
	}
}